@page "/study-new/{CharacterId}"

@using DanilvarKanji.Shared.Responses.Character
@using DanilvarKanji.Client.Services.Characters
@using DanilvarKanji.Client.Localization
@using DanilvarKanji.Domain.Enumerations
@using DanilvarKanji.Shared.Requests.CharacterLearnings
@using Blazored.Modal.Services

<ForbidIfNotAuthorized>
    @if (_character is not null)
    {
        <DisplayCharacterDefinition Character="_character"/>
        <ContentSlider OnContentEnd="OnContentEnd"
                       ContentDictionary="_contentDictionary"
                       ButtonStyle="btn btn-elg btn-primary mx-2"/>

        if (_contentEnded)
        {
            <div class="d-grid gap-2 mb-2">
                <button class="btn btn-elg btn-primary" @onclick="FinishLearning">Finish</button>
            </div>
        }
    }
    else
    {
        <DisplayLoading/>
    }
</ForbidIfNotAuthorized>

@code {

    [CascadingParameter]
    public required IModalService ModalService { get; set; }

    [Parameter, EditorRequired]
    public required string CharacterId { get; set; }

    [Inject]
    public required ICharacterService CharacterService { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    [Inject]
    public required ICharacterLearningService CharacterLearningService { get; set; }

    [Inject]
    public required ILocalizationService LocalizationService { get; set; }

    private bool _contentEnded;
    private CreateCharacterLearningRequest _characterLearningRequest = new();
    private GetAllFromCharacterResponse? _character;
    private Culture _culture = Culture.EnUS;
    private Dictionary<int, RenderFragment> _contentDictionary = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentCulture();
        _character = await CharacterService.GetCharacterAsync(CharacterId);

        if (_character?.CharacterType is CharacterType.Kanji)
            InitializeKanjiContent();
        else
            InitializeRadicalContent();
    }

    private void OnContentEnd()
    {
        _contentEnded = true;
        StateHasChanged();
    }

    private async Task FinishLearning()
    {
        if (_character != null)
        {
            _characterLearningRequest = new CreateCharacterLearningRequest(_character.Id, LearningState.Learning);
            var characterLearning = await CharacterLearningService.CreateCharacterLearningAsync(_characterLearningRequest);

            var options = new ModalOptions
            {
                Position = ModalPosition.Middle,
                Class = "custom-modal"
            };

            var parameters = new ModalParameters()
                .Add(nameof(ConfirmCancelModal.Message), "Hello, World!")
                .Add(nameof(ConfirmCancelModal.OnConfirm), () => 
                { NavigationManager.NavigateTo($"/review/{characterLearning?.Id}"); });

            ModalService.Show<ConfirmCancelModal>("Are you finished", parameters, options);
        }
    }

    private void InitializeKanjiContent()
    {
        _contentDictionary = new Dictionary<int, RenderFragment>()
        {
            {
                0, @<div class="fade-in-el">
                       <DisplayCharacterMeanings Character="@_character" Culture="_culture"/>
                   </div>
            },
            {
                1, @<div class="fade-in-el">
                       <DisplayCharacterMnemonics Character="_character" Culture="_culture"/>
                   </div>
            },
            {
                2, @<div class="fade-in-el">
                       <DisplayCharacterKunReadings Character="_character"/>
                   </div>
            },
            {
                3, @<div class="fade-in-el">
                       <DisplayCharacterOnReadings Character="_character"/>
                   </div>
            }
        };
    }

    private void InitializeRadicalContent()
    {
        _contentDictionary = new Dictionary<int, RenderFragment>()
        {
            {
                0, @<div class="fade-in-el">
                       <DisplayCharacterMeanings Character="@_character" Culture="_culture"/>
                   </div>
            },
            {
                1, @<div class="fade-in-el">
                       <DisplayCharacterMnemonics Character="_character" Culture="_culture"/>
                   </div>
            }
        };
    }

    private async Task GetCurrentCulture() =>
        _culture = await LocalizationService.GetCurrentCulture();

}