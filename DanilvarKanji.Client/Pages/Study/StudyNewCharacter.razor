@page "/study-new/{CharacterId}"
@using DanilvarKanji.Shared.Responses.Character
@using DanilvarKanji.Client.Services.Characters
@using DanilvarKanji.Client.Localization
@using DanilvarKanji.Domain.Enumerations

<ForbidIfNotAuthorized>
    @if (_character is not null)
    {
        <DisplayCharacterDefinition Character="_character"/>
        <ContentSlider ContentDictionary="_contentDictionary"></ContentSlider>
    }
    else
    {
        <DisplayLoading/>
    }
</ForbidIfNotAuthorized>

@code {

    [Parameter, EditorRequired]
    public required string CharacterId { get; set; }

    [Inject]
    public required ICharacterService CharacterService { get; set; }

    [Inject]
    public required ILocalizationService LocalizationService { get; set; }

    private Dictionary<int, RenderFragment> _contentDictionary = new();
    private GetAllFromCharacterResponse? _character;
    private Culture _culture = Culture.EnUS;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentCulture();
        _character = await CharacterService.GetCharacterAsync(CharacterId);

        InitializeContent();
    }

    private void InitializeContent()
    {
        _contentDictionary = new Dictionary<int, RenderFragment>()
        {
            {
                0, @<div class="fade-in-el">
                       <DisplayCharacterMeanings Character="@_character" Culture="_culture"/>
                   </div>
            },
            {
                1, @<div class="fade-in-el">
                       <DisplayCharacterMnemonics Character="_character" Culture="_culture"/>
                   </div>
            },
            {
                2, @<div class="fade-in-el">
                       <DisplayCharacterKunReadings Character="_character"/>
                   </div>
            },
            {
                3, @<div class="fade-in-el">
                       <DisplayCharacterOnReadings Character="_character"/>
                   </div>
            }
        };
    }

    private async Task GetCurrentCulture() =>
        _culture = await LocalizationService.GetCurrentCulture();

}