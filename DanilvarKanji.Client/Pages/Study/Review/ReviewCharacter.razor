@page "/review/{CharacterLearningId}"
@using Blazored.Modal.Services
@using DanilvarKanji.Client.Localization
@using DanilvarKanji.Client.Services.Characters
@using DanilvarKanji.Client.Services.Review
@using DanilvarKanji.Client.State
@using DanilvarKanji.Domain.Shared.Enumerations
@using DanilvarKanji.Shared.Requests.Exercises
@using DanilvarKanji.Shared.Requests.Reviews
@using DanilvarKanji.Shared.Responses.Character
@using DanilvarKanji.Shared.Responses.CharacterLearning
@using DanilvarKanji.Shared.Responses.Exercise
@using DanilvarKanji.Shared.Responses.Review

<PageTitle>Review</PageTitle>

<ForbidIfNotAuthorized>
    @if (_character is not null)
    {
        if (_isAdditional)
        {
            <WarnAlert Message="Additional review with no progression"/>
        }

        <DisplayCharacterDefinition RandomFont="@(true)" Character="_character"/>
        <CharacterLearningProgress CharacterLearningId="@CharacterLearningId"/>
        <p>@_character.Id</p>
        @_exercises[_currentExcercise]

        <div class="d-grid gap-4 mt-4 mb-4">
            <button class="btn btn btn-outline-secondary"
                    @onclick="SkipCharacterFromLearning">
                Skip this character from learning
            </button>
        </div>
    }
    else
    {
        <DisplayLoading/>
    }


</ForbidIfNotAuthorized>


@code {
    [Parameter] [EditorRequired] public required string CharacterLearningId { get; set; }

    [CascadingParameter] public required IModalService ModalService { get; set; }

    [Inject] public required AppState AppState { get; set; }

    [Inject] public required ICharacterLearningApiService CharacterLearningApiService { get; set; }

    [Inject] public required CharacterLearningService CharacterLearningService { get; set; }

    [Inject] public required ICharacterService CharacterService { get; set; }

    [Inject] public required IExerciseService ExerciseService { get; set; }

    [Inject] public required ILocalizationService LocalizationService { get; set; }

    [Inject] public required IReviewService ReviewService { get; set; }

    [Inject] public required NavigationManager NavigationManager { get; set; }

    private const int AfterAnswerDelay = 250;
    private int _currentExcercise;
    private bool _reviewFinished;
    private bool _isAdditional;

    private CharacterLearningResponseFull? _learning;
    private CharacterResponseResponseFull? _character;
    private Culture _culture;
    private readonly List<RenderFragment> _exercises = new();
    private ReviewSession _reviewSession;
    private ReviewSessionResponseBase _reviewSessionResponse = new();
    private readonly CreateReviewSessionRequest _createReviewSessionRequest = new();

    protected override async Task OnInitializedAsync()
    {
        _culture = await LocalizationService.GetCurrentCulture();

        _learning = await CharacterLearningApiService.GetLearningAsync(CharacterLearningId);
        _isAdditional = _learning?.NextReviewDateTime >= DateTime.Today;
        _character = await CharacterService.GetCharacterAsync(_learning?.Character.Id);

        InitExercises();

        if (_currentExcercise == 0)
            await AppState.ReviewSessionState.NewReviewSession();

        _reviewSession = AppState.ReviewSessionState.ReviewSession;
    }

    private void InitExercises()
    {
        _exercises.Add(@<div class="fade-in-el">
            <VerifyOnyomiByPointing
                CharacterForVerification="_character"
                Culture="_culture"
                OnCorrect="@(() => OnCorrectPointExercise(ExerciseSubject.Onyomi))"
                OnForgot="@(() => OnForgotExercise(ExerciseType.Point, ExerciseSubject.Onyomi))"
                OnIncorrect="@(() => OnIncorrectPointExercise(ExerciseType.Point, ExerciseSubject.Onyomi))"/>
        </div>);

        _exercises.Add(@<div class="fade-in-el">
            <VerifyKunyomiByPointing
                CharacterForVerification="_character"
                Culture="_culture"
                OnCorrect="@(() => OnCorrectPointExercise(ExerciseSubject.Kunyomi))"
                OnForgot="@(() => OnForgotExercise(ExerciseType.Point, ExerciseSubject.Kunyomi))"
                OnIncorrect="@(() => OnIncorrectPointExercise(ExerciseType.Point, ExerciseSubject.Kunyomi))"/>
        </div>);

        _exercises.Add(@<div class="fade-in-el">
            <VerifyOnyomiByInput
                OnConfirm="@(async () => await OnConfirmExercise())"
                OnCorrect="@(() => OnCorrectExercise(ExerciseType.Input, ExerciseSubject.Onyomi))"
                OnIncorrect="@(() => OnIncorrectExercise(ExerciseType.Input, ExerciseSubject.Onyomi))"
                CharacterForVerification="_character"/>
        </div>);
        _exercises.Add(@<div class="fade-in-el">
            <VerifyKunyomiByInput
                OnConfirm="@(async () => await OnConfirmExercise())"
                OnCorrect="@(() => OnCorrectExercise(ExerciseType.Input, ExerciseSubject.Kunyomi))"
                OnForgot="@(() => OnForgotExercise(ExerciseType.Input, ExerciseSubject.Kunyomi))"
                OnIncorrect="@(() => OnIncorrectExercise(ExerciseType.Input, ExerciseSubject.Kunyomi))"
                CharacterForVerification="_character"/>
        </div>);
        _exercises.Add(@<div class="fade-in-el">
            <VerifyMeaningByPointing
                CharacterForVerification="_character"
                Culture="_culture"
                OnCorrect="@(() => OnCorrectPointExercise(ExerciseSubject.Meaning))"
                OnForgot="@(() => OnForgotExercise(ExerciseType.Point, ExerciseSubject.Meaning))"
                OnIncorrect="@(() => OnIncorrectPointExercise(ExerciseType.Point, ExerciseSubject.Meaning))"/>
        </div>);
        _exercises.Add(@<div class="fade-in-el">
            <VerifyMeaningByInput
                OnConfirm="@(async () => await OnConfirmExercise())"
                OnForgot="@(() => OnForgotExercise(ExerciseType.Input, ExerciseSubject.Meaning))"
                OnCorrect="@(() => OnCorrectExercise(ExerciseType.Input, ExerciseSubject.Meaning))"
                OnIncorrect="@(() => OnIncorrectExercise(ExerciseType.Input, ExerciseSubject.Meaning))"
                CharacterForVerification="_character"/>
        </div>);
    }

    private async Task OnCorrectPointExercise(ExerciseSubject exerciseSubject)
    {
        await Task.Delay(AfterAnswerDelay);
        await OnCorrectExercise(ExerciseType.Point, exerciseSubject);
    }

    private async Task OnCorrectExercise(ExerciseType exerciseType, ExerciseSubject exerciseSubject)
    {
        if (!_isAdditional)
            await AddExerciseToReviewSession(true, exerciseType, exerciseSubject);

        await OnConfirmExercise();
    }

    private async Task OnIncorrectExercise(ExerciseType exerciseType, ExerciseSubject exerciseSubject)
    {
        if (!_isAdditional)
            await AddExerciseToReviewSession(false, exerciseType, exerciseSubject);
        await OnConfirmExercise();
    }

    private async Task OnForgotExercise(ExerciseType exerciseType, ExerciseSubject exerciseSubject)
    {
        if (!_isAdditional)
            await AddExerciseToReviewSession(false, exerciseType, exerciseSubject);

        await OnConfirmExercise();
    }

    private async Task OnIncorrectPointExercise(ExerciseType exerciseType, ExerciseSubject exerciseSubject)
    {
        if (!_isAdditional)
            await AddExerciseToReviewSession(false, exerciseType, exerciseSubject);
    }

    private async Task OnIncorrectMeaning()
    {
        await AddExerciseToReviewSession(false, ExerciseType.Input, ExerciseSubject.Meaning);
    }

    private void SkipCharacterFromLearning()
    {
        CharacterLearningService.ToggleCharLearningSkipState(_learning!.Id, "/");
        /*try
        {
            var options = new ModalOptions
            {
                Position = ModalPosition.Middle,
                Class = "custom-modal"
            };

            var parameters = new ModalParameters()
                .Add(nameof(ConfirmCancelModal.Message), "AGH")
                .Add(nameof(ConfirmCancelModal.OnConfirm), async () =>
                {
                    await CharacterLearningHttpService.ToggleSkipStateAsync(_learning?.Id);

                    NavigationManager.NavigateTo("/");
                });

            ModalService.Show<ConfirmCancelModal>("AHAHHAH", parameters, options);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
            throw;
        }*/
    }

    private async Task OnConfirmExercise()
    {
        await GoToNextExerciseOrFinish();

        StateHasChanged();
    }

    private async Task GoToNextExerciseOrFinish()
    {
        if (_currentExcercise >= _exercises.Count - 1)
        {
            _reviewFinished = true;
        }
        else
        {
            _currentExcercise++;
        }

        if (_reviewFinished)
        {
            if (!_isAdditional)
            {
                ReviewSessionResponseBase? review = await ReviewService.CreateReviewSessionAsync(_createReviewSessionRequest);
                NavigationManager.NavigateTo($"/Review/Result/{review?.Id}/{_character?.Id}");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    private async Task AddExerciseToReviewSession(bool isCorrect, ExerciseType exerciseType, ExerciseSubject exerciseSubject)
    {
        ExerciseResponseFull? exercise = await ExerciseService
            .CreateExerciseAsync(new CreateExerciseRequest(_character!.Id,
                isCorrect,
                exerciseType,
                exerciseSubject));

        _createReviewSessionRequest.ExerciseIds.Add(exercise!.Id);


        _reviewSession.Exercises.Add(exercise);

        await AppState.ReviewSessionState.UpdateReviewSession(_reviewSession);
    }

}