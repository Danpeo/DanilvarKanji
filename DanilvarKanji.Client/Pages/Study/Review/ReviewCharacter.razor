@page "/review/{CharacterLearningId}"

@using DanilvarKanji.Shared.Responses.Character
@using DanilvarKanji.Shared.Responses.CharacterLearning
@using DanilvarKanji.Client.Services.Characters
@using DanilvarKanji.Client.Services.Review
@using DanilvarKanji.Shared.Requests.Exercises
@using DanilvarKanji.Client.Localization
@using DanilvarKanji.Client.State
@using DanilvarKanji.Shared.Domain.Enumerations
@using DanilvarKanji.Shared.Requests.Reviews
@using DanilvarKanji.Shared.Responses.Review
@using Blazored.Modal.Services

<ForbidIfNotAuthorized>
    @if (_character is not null)
    {
        <DisplayCharacterDefinition Character="_character"/>
        <p>@_character.Id</p>
        @_exercises[_currentExcercise]

        <div class="d-grid gap-4 mt-4 mb-4">
            <button class="btn btn btn-outline-secondary"
                    @onclick="SkipCharacterFromLearning">
                Skip this character from learning
            </button>
        </div>
    }
    else
    {
        <DisplayLoading/>
    }



</ForbidIfNotAuthorized>


@code {

    [Parameter, EditorRequired]
    public required string CharacterLearningId { get; set; }

    [CascadingParameter]
    public required IModalService ModalService { get; set; }

    [Inject]
    public required AppState AppState { get; set; }

    [Inject]
    public required ICharacterLearningHttpService CharacterLearningHttpService { get; set; }

    [Inject] public required CharacterLearningService CharacterLearningService { get; set; }
    
    [Inject]
    public required ICharacterService CharacterService { get; set; }

    [Inject]
    public required IExerciseService ExerciseService { get; set; }

    [Inject]
    public required ILocalizationService LocalizationService { get; set; }

    [Inject]
    public required IReviewService ReviewService { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

        private const int AfterAnswerDelay = 250;
    private int _currentExcercise;
    private bool _reviewFinished;

    private GetAllFromCharacterLearningResponse? _learning;
    private GetAllFromCharacterResponse? _character;
    private Culture _culture;
    private List<RenderFragment> _exercises = new();
    private ReviewSession _reviewSession;
    private GetBaseReviewSessionResponse _reviewSessionResponse = new();
    private CreateReviewSessionRequest _createReviewSessionRequest = new();

    protected override async Task OnInitializedAsync()
    {
        _culture = await LocalizationService.GetCurrentCulture();

        _learning = await CharacterLearningHttpService.GetLearningAsync(CharacterLearningId);
        _character = await CharacterService.GetCharacterAsync(_learning?.Character.Id);

        InitExercises();

        if (_currentExcercise == 0)
            await AppState.ReviewSessionState.NewReviewSession();

        _reviewSession = AppState.ReviewSessionState.ReviewSession;
    }

    private void InitExercises()
    {
        _exercises.Add(@<div class="fade-in-el">
                           <VerifyOnyomiByPointing
                               CharacterForVerification="_character"
                               Culture="_culture"
                               OnCorrect="@(() => OnCorrectPointExercise(ExerciseType.Onyomi))"
                               OnForgot="@(() => OnForgotExercise(ReviewType.Point, ExerciseType.Onyomi))"
                               OnIncorrect="@(() => OnIncorrectPointExercise(ReviewType.Point, ExerciseType.Onyomi))"/>
                       </div>);

        _exercises.Add(@<div class="fade-in-el">
                           <VerifyKunyomiByPointing
                               CharacterForVerification="_character"
                               Culture="_culture"
                               OnCorrect="@(() => OnCorrectPointExercise(ExerciseType.Kunyomi))"
                               OnForgot="@(() => OnForgotExercise(ReviewType.Point, ExerciseType.Kunyomi))"
                               OnIncorrect="@(() => OnIncorrectPointExercise(ReviewType.Point, ExerciseType.Kunyomi))"/>
                       </div>);

        _exercises.Add(@<div class="fade-in-el">
                           <VerifyOnyomiByInput
                               OnConfirm="@(async () => await OnConfirmExercise())"
                               OnCorrect="@(() => OnCorrectExercise(ReviewType.Input, ExerciseType.Onyomi))"
                               OnIncorrect="@(() => OnIncorrectExercise(ReviewType.Input, ExerciseType.Onyomi))"
                               CharacterForVerification="_character"/>
                       </div>);
        _exercises.Add(@<div class="fade-in-el">
                           <VerifyKunyomiByInput
                               OnConfirm="@(async () => await OnConfirmExercise())"
                               OnCorrect="@(() => OnCorrectExercise(ReviewType.Input, ExerciseType.Kunyomi))"
                               OnForgot="@(() => OnForgotExercise(ReviewType.Input, ExerciseType.Kunyomi))"
                               OnIncorrect="@(() => OnIncorrectExercise(ReviewType.Input, ExerciseType.Kunyomi))"
                               CharacterForVerification="_character"/>
                       </div>);
        _exercises.Add(@<div class="fade-in-el">
                           <VerifyMeaningByPointing
                               CharacterForVerification="_character"
                               Culture="_culture"
                               OnCorrect="@(() => OnCorrectPointExercise(ExerciseType.Meaning))"
                               OnForgot="@(() => OnForgotExercise(ReviewType.Point, ExerciseType.Meaning))"
                               OnIncorrect="@(() => OnIncorrectPointExercise(ReviewType.Point, ExerciseType.Meaning))"/>
                       </div>);
        _exercises.Add(@<div class="fade-in-el">
                           <VerifyMeaningByInput
                               OnConfirm="@(async () => await OnConfirmExercise())"
                               OnCorrect="@(() => OnCorrectExercise(ReviewType.Input, ExerciseType.Meaning))"
                               OnIncorrect="@(() => OnIncorrectExercise(ReviewType.Input, ExerciseType.Meaning))"
                               CharacterForVerification="_character"/>
                       </div>);
    }

    private async Task OnCorrectPointExercise(ExerciseType exerciseType)
    {
        await Task.Delay(AfterAnswerDelay);
        await OnCorrectExercise(ReviewType.Point, exerciseType);
    }

    private async Task OnCorrectExercise(ReviewType reviewType, ExerciseType exerciseType)
    {
        await AddExerciseToReviewSession(isCorrect: true, reviewType, exerciseType);

        await OnConfirmExercise();
    }

    private async Task OnIncorrectExercise(ReviewType reviewType, ExerciseType exerciseType)
    {
        await AddExerciseToReviewSession(isCorrect: false, reviewType, exerciseType);
        await OnConfirmExercise();
    }

    private async Task OnForgotExercise(ReviewType reviewType, ExerciseType exerciseType)
    {
        await AddExerciseToReviewSession(isCorrect: false, reviewType, exerciseType);

        await OnConfirmExercise();
    }

    private async Task OnIncorrectPointExercise(ReviewType reviewType, ExerciseType exerciseType) =>
        await AddExerciseToReviewSession(isCorrect: false, reviewType, exerciseType);

    private async Task OnIncorrectMeaning()
    {
        await AddExerciseToReviewSession(isCorrect: false, ReviewType.Input, ExerciseType.Meaning);
    }

    private void SkipCharacterFromLearning()
    {
        CharacterLearningService.SkipCharacterFromLearning(_learning!.Id, naviteToAfterSkip: "/");
        /*try
        {
            var options = new ModalOptions
            {
                Position = ModalPosition.Middle,
                Class = "custom-modal"
            };

            var parameters = new ModalParameters()
                .Add(nameof(ConfirmCancelModal.Message), "AGH")
                .Add(nameof(ConfirmCancelModal.OnConfirm), async () =>
                {
                    await CharacterLearningHttpService.ToggleSkipStateAsync(_learning?.Id);

                    NavigationManager.NavigateTo("/");
                });

            ModalService.Show<ConfirmCancelModal>("AHAHHAH", parameters, options);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
            throw;
        }*/
    }

    private async Task OnConfirmExercise()
    {
        await GoToNextExerciseOrFinish();

        StateHasChanged();
    }

    private async Task GoToNextExerciseOrFinish()
    {
        if (_currentExcercise >= _exercises.Count - 1)
        {
            _reviewFinished = true;
        }
        else
        {
            _currentExcercise++;
        }

        if (_reviewFinished)
        {
            var review = await ReviewService.CreateReviewSessionAsync(_createReviewSessionRequest);
            NavigationManager.NavigateTo($"/Review/Result/{review?.Id}/{_character?.Id}");
        }
    }

    private async Task AddExerciseToReviewSession(bool isCorrect, ReviewType reviewType, ExerciseType exerciseType)
    {
        var exercise = await ExerciseService
            .CreateExerciseAsync(new CreateExerciseRequest(_character!.Id,
                isCorrect: isCorrect,
                reviewType,
                exerciseType));

        _createReviewSessionRequest.ExerciseIds.Add(exercise!.Id);


        _reviewSession.Exercises.Add(exercise);

        await AppState.ReviewSessionState.UpdateReviewSession(_reviewSession);
    }

}