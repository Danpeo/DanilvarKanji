@page "/review/{CharacterLearningId}"

@using DanilvarKanji.Shared.Responses.Character
@using DanilvarKanji.Domain.Enumerations
@using DanilvarKanji.Shared.Responses.CharacterLearning
@using DanilvarKanji.Client.Services.Characters
@using DanilvarKanji.Client.Services.Review
@using DanilvarKanji.Shared.Requests.Exercises
@using DanilvarKanji.Client.JsWrapper
@using DanilvarKanji.Client.State
@using DanilvarKanji.Shared.Responses.Exercise

<ForbidIfNotAuthorized>
    @if (_character is not null)
    {
        <DisplayCharacterDefinition Character="_character"/>
        <p>@_character.Id</p>
        @_exercises[_currentExcercise]
    }
    else
    {
        <DisplayLoading/>
    }



</ForbidIfNotAuthorized>


@code {

    [Parameter, EditorRequired]
    public required string CharacterLearningId { get; set; }

    [Inject]
    public AppState AppState { get; set; }

    [Inject]
    public required JsGen JsGen { get; set; }

    [Inject]
    public required ICharacterLearningService CharacterLearningService { get; set; }

    [Inject]
    public required ICharacterService CharacterService { get; set; }

    [Inject]
    public required IExerciseService ExerciseService { get; set; }

    private int _currentExcercise;
    private bool _reviewFinished = false;

    private GetAllFromCharacterLearningResponse? _learning;
    private GetAllFromCharacterResponse? _character;
    private Culture _culture = Culture.EnUS;
    private List<RenderFragment> _exercises = new();
    private ReviewSession _reviewSession;

    protected override async Task OnInitializedAsync()
    {
        _learning = await CharacterLearningService.GetLearnignAsync(CharacterLearningId);
        _character = await CharacterService.GetCharacterAsync(_learning?.Character.Id);

        InitExercises();

        if (_currentExcercise == 0)
            await AppState.ReviewSessionState.NewReviewSession();

        _reviewSession = AppState.ReviewSessionState.ReviewSession;
    }

    private void InitExercises()
    {
        _exercises.Add(@<div class="fade-in-el">
                           <VerifyMeaningByInput
                               OnConfirm="OnConfirmMeaning"
                               OnCorrect="OnCorrectMeaning"
                               OnIncorrect="OnIncorrectMeaning"
                               CharacterForVerification="_character"/>
                       </div>);

        _exercises.Add(@<div class="fade-in-el">
                           <VerifyValueByInput OnConfirm="OnConfirmMeaning" CharacterForVerification="_character"/>
                       </div>);
    }


    private async Task OnCorrectMeaning()
    {
        await AddMeaningExerciseToReviewSession(isCorrect: true);

        OnConfirmMeaning();
    }

    private async Task OnIncorrectMeaning()
    {
        await AddMeaningExerciseToReviewSession(isCorrect: false);
    }

    private void OnConfirmMeaning()
    {
        GoToNextExerciseOrFinish();

        StateHasChanged();
    }

    private void GoToNextExerciseOrFinish()
    {
        if (_currentExcercise >= _exercises.Count - 1)
        {
            _reviewFinished = true;
        }
        else
        {
            _currentExcercise++;
        }
    }

    private async Task AddMeaningExerciseToReviewSession(bool isCorrect)
    {
        _reviewSession.Exercises.Add(await ExerciseService
            .CreateExerciseAsync(new CreateExerciseRequest(_character!.Id,
                isCorrect: isCorrect,
                ReviewType.Input,
                ExerciseType.Meaning)));

        await AppState.ReviewSessionState.UpdateReviewSession(_reviewSession);
    }

}