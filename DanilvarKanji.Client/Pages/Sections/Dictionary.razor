@page "/Dictionary"
@using DanilvarKanji.Client.Services.Dictionary
@using DanilvarKanji.Client.Models.Responses.JMdict
@using DanilvarKanji.Client.State
@using WanaKanaNet

<PageTitle>@Loc["Dictionary"]</PageTitle>

<h3 class="mb-5 display-3 txt-bright-pink main-font">@Loc["Dictionary"]</h3>

<p class="fs-3 text-center">@Loc["DictionaryPlaceholder"]</p>

<div class="input-group mb-4">
    <input @onkeydown="SearchForWordsOnKey"
           @bind="_entry"
           @bind:event="oninput"
           type="search"
           placeholder="@Loc["DictionaryPlaceholder"]"
           class="form-control bg-secondary-2 no-border txt-light-pink main-font"/>

    <div class="ms-2">
        <button @onclick="SearchForWords" class="btn btn-outline-primary" type="submit">
            @Loc["Search"]
        </button>
    </div>
</div>

@if (_words == null)
{
    <DisplayLoading/>
}
else if (!_words.Any())
{
    <p>No words... yet...</p>
}
else if (_words != null)
{
    @foreach (var word in _words)
    {
        <div class="card mb-2 bg-secondary-2">
            <div class="row g-0">
                <div class="col-md-4 px-5">

                    @if (word.Kanjis.Count > 1)
                    {
                        @foreach (var kanji in word!.Kanjis)
                        {
                            if (kanji.Common.Value)
                            {
                                <h1 class="display-3 txt-mid-pink jap-font">@kanji.Text</h1>
                            }
                        }
                    }
                    else
                    {
                        foreach (var kanji in word!.Kanjis)
                        {
                            <h1 class="display-3 txt-mid-pink jap-font">@kanji.Text</h1>
                        }
                    }

                    @foreach (var kana in word.Kanas)
                    {
                        <div class="px-2">
                            <h2 class="fs-5 jap-font">@kana.Text</h2>
                        </div>
                    }
                </div>


                @foreach (var sense in word.Senses)
                {
                    <div class="col-md-8">
                        <div class="card-body">
                            @if (sense.Glosses.Count > 1)
                            {
                                int i = 1;
                                @foreach (var gloss in sense.Glosses)
                                {
                                    <h5 class="card-title">
                                        <span>@i. </span> @gloss.Text?[2..]
                                    </h5>
                                    i++;
                                }
                            }
                            else
                            {
                                <h5 class="card-title">
                                    @sense.Glosses[0].Text
                                </h5>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}

@code {

    [Inject]
    public required IDictionaryService DictionaryService { get; set; }

    [Inject]
    public required AppState AppState { get; set; }

    [Inject] public IStringLocalizer<App> Loc { get; set; } = null!;

    private IEnumerable<Word?>? _words = new List<Word?>();
    private string _entry = string.Empty;

    protected override void OnInitialized()
    {
        _words = AppState.DictionaryState.LastWords;
    }

    private async Task SearchForWordsOnKey(KeyboardEventArgs args)
    {
        if (args.Key != "Enter")
            return;

        await SearchForWords();
    }

    private async Task SearchForWords()
    {
        _words = null;

        if (WanaKana.IsHiragana(_entry) || WanaKana.IsKatakana(_entry) || WanaKana.IsKana(_entry))
        {
            _words = await DictionaryService.ListWordsByKanaAsync(_entry);
            return;
        }

        if (WanaKana.IsMixed(_entry))
        {
            _words = await DictionaryService.ListWordsByKanaAsync(_entry);
            return;
        }

        bool isKanji = _entry.Any(c => WanaKana.IsKanji(c));
        
        if (isKanji)
            _words = await DictionaryService.ListWordsByKanjiAsync(_entry);
        else
            _words = await DictionaryService.ListWordsByTranslationAsync(_entry);

        _words ??= Enumerable.Empty<Word>();

        await AppState.DictionaryState.UpdateNextToReview(_words);
    }


}