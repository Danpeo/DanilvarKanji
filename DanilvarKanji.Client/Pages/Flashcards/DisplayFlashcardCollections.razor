@page "/Flashcards"
@using DanilvarKanji.Client.Data
@using DanilvarKanji.Client.Services.Flashcards
@using DanilvarKanji.Shared.Requests.Flashcards
@using DanilvarKanji.Shared.Responses.Flashcards

@inject IStringLocalizer<App> Loc;

<PageTitle>@Loc["Flashcards"] - @AppDisplaySettings.AppTitle</PageTitle>

<h3 class="mb-5 display-3 txt-bright-pink main-font">@Loc["Flashcards"]</h3>

<div class="d-flex">
    <button type="button" @onclick="@(() => NavigationManager.NavigateTo("/Add"))" class="btn btn-secondary-alt mb-2">
        @Loc["AddNewCollection"]
    </button>
</div>

@if (_flashcardCollections is null)
{
    <DisplayLoading/>
}
else if (!_flashcardCollections.Any())
{
    <Message Text="No collections found"/>
}
else
{
    @foreach (FlashcardCollectionResponse collection in _flashcardCollections)
    {
        <div class="col-md-3 mb-2">
            <div class="card bg-secondary-2">
                <div class="card-body">
                    <h1 class="card-title fs-3 mb-3 jap-font txt-mid-pink text-center">
                        @collection.Name
                    </h1>
                    <p class="fs-6">
                        @collection.Flashcards.Count @Loc["Flashcards"].Value.ToLower(),

                        <span>
                            @collection.Flashcards.Where(f => f.DoRemember).ToList().Count
                            @Loc["Memorized"].Value.ToLower()
                        </span>
                    </p>
                    <LongElement>
                        <button class="btn btn-lg btn-primary mb-2"
                                @onclick="@(() => NavigationManager.NavigateTo($"Flashcards/Collection/Review/{collection.Id}"))">
                            @Loc["Review"]
                        </button>
                    </LongElement>
                    <button class="btn btn-outline-primary"
                            @onclick="@(() => NavigationManager.NavigateTo($"Flashcards/Collection/{collection.Id}"))">
                        @Loc["ToView"]
                    </button>
                    <button class="btn btn-outline-warning"
                            @onclick="@(() => ResetCollection(collection))">
                        @Loc["Reset"]
                    </button>
                    <button class="btn btn-outline-danger"
                            @onclick="@(() => DeleteCollection(collection.Id))">
                        @Loc["Delete"]
                    </button>
                    <p class="fs-6">
                        @collection.ModifiedDateTime.ToLocalTime();
                    </p>
                </div>
            </div>
        </div>
    }
}

@code {
    [Inject] public required NavigationManager NavigationManager { get; set; }

    [Inject] public required IFlashcardApiService FlashcardApiService { get; set; }

    private List<FlashcardCollectionResponse>? _flashcardCollections;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _flashcardCollections = await FlashcardApiService.ListFlashcardCollectionsAsync();
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void ResetCollection(FlashcardCollectionResponse collection)
    {
        try
        {
            collection.Flashcards.ForEach(f =>
            {
                f.DoRemember = false;
                f.RememberedInARow = 0;
            });

            FlashcardApiService.UpdateFlashcardCollectionAsync
            (
                new UpdateFlashcardCollectionRequest(collection.Name, collection.Flashcards, collection.Id)
            );
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void DeleteCollection(string collectionId)
    {
        try
        {
            _flashcardCollections!.RemoveAll(f => f.Id == collectionId);
            FlashcardApiService.DeleteCollectionAsync(collectionId);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}