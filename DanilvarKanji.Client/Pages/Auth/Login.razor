@page "/Login"

@using DanilvarKanji.Client.Services.Auth
@using DanilvarKanji.Shared.Requests.Auth
@using DanilvarKanji.Shared.Responses.Auth
@using DanilvarKanji.Client.Data
@using Blazored.Modal.Services

@inject IAuthService AuthenticationService;
@inject NavigationManager NavManager;

<PageTitle>Register - @AppDisplaySettings.AppTitle</PageTitle>

<h3 class="mb-5 display-3 animated-blink main-font">Log In</h3>

<EditForm Model="_loginRequest" OnValidSubmit="HandleSubmitAsync" OnInvalidSubmit="HandleInvalidSubmit">
    <FluentValidationValidator/>

    <FormSection Title="Authorize" HelpText="Log in to your account">
        <FormFieldSet Label="Email" LabelFor="email" HelpText="">
            <InputText @bind-Value="_loginRequest.Email" class="form-control bg-secondary txt-white jap-font no-border" id="email" placeholder="Email"/>
            <ValidationMessage For="@(() => _loginRequest.Email)"/>
        </FormFieldSet>

        <FormFieldSet Label="Password" LabelFor="password">
            <InputText @bind-Value="_loginRequest.Password" type="password" class="form-control bg-secondary txt-white jap-font no-border" id="password" placeholder="Password"/>
            <ValidationMessage For="@(() => _loginRequest.Password)"/>
        </FormFieldSet>
    </FormSection>

    @if (_submitSuccessful)
    {
        <SuccessAlertAlt Message="Your account was registered successfully!"/>
        NavManager.NavigateTo("/", true);
    }
    else if (_errorMessage is not null)
    {
        <ErrorAlertAlt Message="@_errorMessage"/>
    }

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => _loginRequest = new LoginUserRequest())">Reset</button>
                <button class="btn btn-primary animated-blink-bg txt-dark" type="submit">Log In</button>
            </div>
        </div>
    </div>
    
</EditForm>


@code {
    [CascadingParameter]
    public required IModalService ModalService { get; set; }

    private LoginUserRequest _loginRequest = new();
    private LoginResponse? _response;
    private bool _submitSuccessful;
    private string? _errorMessage;


    private async Task HandleSubmitAsync()
    {
        IModalReference loadingModal = ModalService.Show<CubeLoadModal>();
        try
        {
            _response = await AuthenticationService.LoginAsync(_loginRequest);
            
            _errorMessage = null;

            if (!string.IsNullOrEmpty(_response?.JwtToken))
                _submitSuccessful = true;
            
            loadingModal.Close();
        }
        catch (UnauthorizedAccessException e)
        {
            loadingModal.Close();
            _submitSuccessful = false;
            _errorMessage = e.Message;
        }
    }

    private void HandleInvalidSubmit()
    {
        _submitSuccessful = false;
        _errorMessage = "There was a problem";
    }

}