@page "/Login"
@using Blazored.Modal.Services
@using DanilvarKanji.Client.Data
@using DanilvarKanji.Client.Services.Auth
@using DanilvarKanji.Shared.Requests.Auth
@using DanilvarKanji.Shared.Responses.Auth

@inject IAuthService AuthenticationService;
@inject NavigationManager NavManager;

<PageTitle>@Loc["Login"] - @AppDisplaySettings.AppTitle</PageTitle>

<h3 class="mb-5 display-3 animated-blink main-font">@Loc["Login"]</h3>

<EditForm Model="_loginRequest" OnValidSubmit="HandleSubmitAsync" OnInvalidSubmit="HandleInvalidSubmit">
  <FluentValidationValidator/>

  <FormSection Title="@(new string($"{Loc["Authorization"]}"))" HelpText="@(new string($"{Loc["LogInToYourAccount"]}"))">
    <FormFieldSet Label="Email" LabelFor="email" HelpText="">
      <InputText @bind-Value="_loginRequest.Email" class="form-control bg-secondary txt-white jap-font no-border" id="email" placeholder="Email"/>
      <ValidationMessage For="@(() => _loginRequest.Email)"/>
    </FormFieldSet>

    <FormFieldSet Label="@(new string($"{Loc["Password"]}"))" LabelFor="password">
      <InputText @bind-Value="_loginRequest.Password" type="password" class="form-control bg-secondary txt-white jap-font no-border" id="password"
                 placeholder="@(new string($"{Loc["Password"]}"))"/>
      <ValidationMessage For="@(() => _loginRequest.Password)"/>
    </FormFieldSet>

    @if (_submitSuccessful)
    {
      <SuccessAlertAlt Message="@(new string($"{Loc["LoggedIn"]}"))"/>
      NavManager.NavigateTo("/", true);
    }
    else if (_errorMessage is not null)
    {
      <ErrorAlertAlt Message="@_errorMessage"/>
    }

    <div class="mt-4 mb-2">
      <div class="row">
        <div class="offset-4 col-8 text-right">
          <button class="btn btn-outline-secondary" type="button" @onclick="@(() => _loginRequest = new LoginUserRequest())">@Loc["Reset"]</button>
          <button class="btn btn-primary animated-blink-bg txt-dark" type="submit">@Loc["Login"]</button>
        </div>
      </div>
    </div>
  </FormSection>

</EditForm>


@code {
  [CascadingParameter] public required IModalService ModalService { get; set; }

  [Inject] public required IStringLocalizer<App> Loc { get; set; }

  private LoginUserRequest _loginRequest = new();
  private LoginResponse? _response;
  private bool _submitSuccessful;
  private string? _errorMessage;


  private async Task HandleSubmitAsync()
  {
    IModalReference loadingModal = ModalService.Show<CubeLoadModal>();
    try
    {
      _response = await AuthenticationService.LoginAsync(_loginRequest);
      _errorMessage = null;

      if (!string.IsNullOrEmpty(_response?.JwtToken))
        _submitSuccessful = true;

      loadingModal.Close();
    }
    catch (UnauthorizedAccessException e)
    {
      loadingModal.Close();
      _submitSuccessful = false;
      _errorMessage = e.Message;
    }
  }

  private void HandleInvalidSubmit()
  {
    _submitSuccessful = false;
    _errorMessage = "There was a problem";
  }

}