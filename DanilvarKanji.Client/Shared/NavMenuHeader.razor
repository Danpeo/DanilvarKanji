@using DanilvarKanji.Client.Services.Auth
@using Blazored.Modal.Services
@using DanilvarKanji.Shared.Responses.User

<nav class="navbar navbar-expand-lg navbar-light">

    <div id="navbarNav">
        <ul class="navbar-nav main-font">
            <li class="nav-item active me-5">
                <GoBackButton/>
            </li>
            <li class="nav-item active">
                <CultureSelector/>
            </li>
            <NotAuthorized>
                <NavLink class="btn btn-primary" href="register">Register</NavLink>
                <NavLink class="btn btn-primary" href="login">Log In</NavLink>
            </NotAuthorized>
            <Authorized>
                <HasAnyRole Roles="@(new[] { "Admin, SuperAdmin" })">
                    <p>Admin</p>
                </HasAnyRole>
                <p class="mx-2 card-text txt-mid-pink fs-5">

                    <GetUserName/>
                    <span class="txt-green-dim fs-6">
                        <GetUserJlpt/>
                    </span>
                    <span class="txt-yellow">
                        @(new string($" {_user?.XP} XP"))
                    </span>
                </p>

                <li class="nav-item active mx-1">
                    <NavLink
                        href="/User/Learning-Settings"
                        class="btn btn-outline-primary ">
                        Settings
                    </NavLink>
                </li>

                <li class="nav-item active">
                    <button class="btn btn-primary bg-light-pink txt-dark" @onclick="LogoutAsync">Log Out</button>
                </li>
            </Authorized>
        </ul>
    </div>
</nav>

@code {

    [CascadingParameter] public required IModalService ModalService { get; set; }

    [Inject] public required IAuthService AuthService { get; set; }

    [Inject] public required IUserService UserService { get; set; }

    [Inject] public required NavigationManager NavigationManager { get; set; }

    private UserResponseBase? _user;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserService.GetUserAsync();
    }

    private async Task LogoutAsync()
    {
        ModalService.Show<LoadingModal>();
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/", true);
    }

}