@using DanilvarKanji.Client.Services.Characters
@using DanilvarKanji.Shared.Responses.CharacterLearning

<h2 class="display-6 txt-mid-pink">
    Your Skipped Characters 
    <span class="fs-4 txt-green-dim">
        (@_characterItems?.Count() Items)
    </span>
</h2>

@if (_characterItems == null)
{
    <DisplayLoading/>
}
else if (!string.IsNullOrEmpty(_errMsg))
{
    <h3 class="txt-light-pink main-font text-center mt-1">@_errMsg</h3>
}
else if (!_characterItems.Any())
{
    <h3 class="txt-light-pink main-font text-center mt-1">No characters found</h3>
}
else
{
    <div class="row">
        @foreach (GetCharacterLearningBaseInfoResponse? charLearning in _characterItems)
        {
            <CharacterMinimalCard CharacterBaseInfo="charLearning.Character"
                                  NavigateTo="@(new string($"Character/{charLearning.Character.Id}"))"/>
        }
    </div>
}

@code {

    [Inject]
    public required ICharacterLearningHttpService CharacterLearningHttpService { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    [Parameter]
    public int PageNumber { get; set; } = 1;

    [Parameter]
    public int PageSize { get; set; } = int.MaxValue;

    [Parameter]
    public bool ListOnlyDayDosage { get; set; }

    private IEnumerable<GetCharacterLearningBaseInfoResponse>? _characterItems;
    private string _errMsg = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _characterItems = await CharacterLearningHttpService.ListSkippedAsync(PageNumber, PageSize);
        }
        catch (HttpRequestException e)
        {
            _errMsg = e.Message;
        }
    }

}