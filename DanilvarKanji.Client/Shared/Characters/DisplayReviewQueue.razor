@using DanilvarKanji.Client.Services.Characters
@using DanilvarKanji.Shared.Responses.CharacterLearning

@if (_learningItems == null)
{
    <DisplayLoading></DisplayLoading>
}
else if (!_learningItems.Any())
{
    <h3 class="txt-light-pink main-font text-center mt-1">No characters found</h3>
}
else if (!string.IsNullOrEmpty(_errMsg))
{
    <h3 class="txt-light-pink main-font text-center mt-1">@_errMsg</h3>
}
else
{
    <div class="row">
        @foreach (GetCharacterLearningBaseInfoResponse? learning in _learningItems)
        {
            <CharacterMinimalCard
                CharacterBaseInfo="learning?.Character"
                NavigateTo="@(new string($"review/{learning?.Id}"))"/>
        }
    </div>
}

@code {

    [Inject]
    public required ICharacterLearningService CharacterLearningService { get; set; }

    [Parameter]
    public int PageNumber { get; set; } = 1;

    [Parameter]
    public int PageSize { get; set; } = int.MaxValue;

    private IEnumerable<GetCharacterLearningBaseInfoResponse?>? _learningItems;
    private string _errMsg = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _learningItems = await CharacterLearningService.ListReviewQueueAsync(PageNumber, PageSize);
        }
        catch (HttpRequestException e)
        {
            _errMsg = e.Message;
        }
    }

}