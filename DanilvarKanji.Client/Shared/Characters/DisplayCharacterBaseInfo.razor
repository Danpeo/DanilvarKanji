@using DanilvarKanji.Shared.Responses.Character
@using DanilvarKanji.Client.Services.Characters
@using DanilvarKanji.Client.Extensions
@using DanilvarKanji.Client.Localization
@using DanilvarKanji.Domain.Entities
@using DanilvarKanji.Domain.Enumerations


<h1 class="txt-mid-pink display-1 text-center jap-font">
    @_character?.Definition
</h1>
<p class="card-text txt-gray jap-font text-center">
    JLPT @_character?.JlptLevel.GetDisplayName(),
    <span class="txt-light-pink">@GetCharacterTypeLocalizedName(_character?.CharacterType)</span>
</p>


@if (_kanjiMeanings is not null)
{
    <CardWrapper HelpText="MEANINGS">
        <p class="main-font">

            @for (int i = 0; i < _kanjiMeanings.Count; i++)
            {
                string resultMeaning = $"{char.ToUpper(_kanjiMeanings[i][0])}{_kanjiMeanings[i][1..]}";

                <span class="@(i == 0 ? "display-3 txt-mid-pink" : "display-6 txt-light-pink")">
                    @resultMeaning

                    @if (i < _kanjiMeanings.Count - 1)
                    {
                        <span>, </span>
                    }
                </span>
            }
        </p>
    </CardWrapper>
}

@code {

    [Parameter, EditorRequired]
    public required string CharacterId { get; set; }

    [Inject]
    public required ICharacterService CharacterService { get; set; }

    [Inject]
    public required IStringLocalizer<App> Localizer { get; set; }

    [Inject]
    public required ILocalizationService LocalizationService { get; set; }

    private GetAllFromCharacterResponse? _character;
    private Culture _culture = Culture.EnUS;
    private List<string>? _kanjiMeanings = new();

    protected override async Task OnInitializedAsync()
    {
        _character = await CharacterService.GetCharacterAsync(CharacterId);

        await GetCurrentCulture();

        _kanjiMeanings = await CharacterService.GetCharacterKanjiMeanings(_character?.Id, int.MaxValue, _culture);
    }

    private async Task GetCurrentCulture() =>
        _culture = await LocalizationService.GetCurrentCulture();

    private string GetCharacterTypeLocalizedName(CharacterType? characterType)
    {
        string localizedName = characterType switch
        {
            CharacterType.Radical => Localizer["Radical"],
            CharacterType.Kanji => Localizer["Kanji"],
            _ => ""
            };

        return localizedName;
    }

}