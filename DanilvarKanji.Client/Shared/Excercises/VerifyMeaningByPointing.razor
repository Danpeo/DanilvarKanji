@using DanilvarKanji.Client.Services.Characters
@using DanilvarKanji.Domain.Enumerations
@using DanilvarKanji.Shared.Responses.Character
@using DanilvarKanji.Client.JsWrapper
@using DanilvarKanji.Shared.Responses.CharacterLearning


@if (_meanings != null)
{
    <WhatIsMeaningOf CharacterForVerification="CharacterForVerification" />
    
    <div class="d-grid gap-4">
        @for (var i = 0; i < _meanings.RandomMeanings.Count; i++)
        {
            string meaning = _meanings.RandomMeanings[i];
            string buttonId = $"optionBtn_{i}";
            <button class="btn btn-dark btn-lg"
                    style="font-size: 1.75rem"
                    id="@buttonId"
                    @onclick="() => CheckAnswer(meaning, buttonId)">
                @meaning
            </button>
        }
    </div>
}
else
{
    <DisplayLoading/>
}

@code {

    [Parameter, EditorRequired]
    public required GetAllFromCharacterResponse CharacterForVerification { get; set; }

    [Parameter, EditorRequired]
    public Culture Culture { get; set; }

    /// <summary>
    /// Invoked only once, then assigned NULL
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task>? OnCorrect { get; set; }
    
    /// <summary>
    /// Invoked only once, then assigned NULL
    /// </summary>
    [Parameter, EditorRequired]
    public Func<Task>? OnIncorrect { get; set; }
    
    [Parameter]
    public int OptionCount { get; set; } = 4;

    [Inject]
    public required Js Js { get; set; }

    [Inject]
    public required ICharacterLearningService CharacterLearningService { get; set; }

    private GetRandomMeaningsInReviewResponse? _meanings;

    protected override async Task OnInitializedAsync()
    {
        _meanings = await CharacterLearningService.GetRandomMeaningsInReviewAsync(CharacterForVerification.Id, Culture, OptionCount);
    }

    private async Task CheckAnswer(string meaning, string buttonId)
    {
        if (meaning == _meanings?.CorrectMeaning)
        {
            await Js.Dom.AddClassesToElement(buttonId, new[] { "bg-success", "txt-dark" });

            if (OnCorrect != null)
            {
                await OnCorrect.Invoke();
                OnCorrect = null;
                OnIncorrect = null;
            }
        }
        else
        {
            await Js.Dom.AddClassesToElementForTime(buttonId, new[] { "shake" }, 500);
            await Js.Dom.AddClassesToElement(buttonId, new[] { "danger-border", "bg-danger", "txt-dark" });

            if (OnIncorrect != null)
            {
                await OnIncorrect.Invoke();
                OnIncorrect = null;
            }
        }
    }

}